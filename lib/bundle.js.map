{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/core/Main.ts","src/core/Table.ts","src/core/TinyDB.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { TinyDB } from \"./TinyDB\";\n\n\nconst exportGlobalObject = function(indexedDB:any){\n  window.TinyDB = indexedDB\n}\nexportGlobalObject(TinyDB)","export class Table {\n  name: string\n  db: IDBDatabase\n  constructor(name: string, db:IDBDatabase){\n    this.name = name\n    this.db = db\n  }\n  // create transaction \n  transaction(mode = true) {\n    return this.db.transaction([this.name], mode === true ? 'readwrite' : 'readonly')\n  }\n  // open or conntect this table \n  request() {\n    return this.transaction().objectStore(this.name)\n  }\n  // get\n  select(selector: any){\n    console.log(1)\n    let index: string\n    let indexValue: any\n    for(let name in  selector){\n      index = name;\n      indexValue = selector[name]\n    }\n    return new Promise((resolve,reject)=>{\n      const selectRequest = this.request().index(index).getAll(indexValue)\n      selectRequest.onsuccess = (e:any) => {\n        resolve(e.target.result)\n      }\n      selectRequest.onerror = (e:any) => {\n        reject(e.target.result)\n      }\n    })\n  }\n  selectId(id:number) {\n    return new Promise((resolve,reject)=>{\n      const selectRequest = this.request().get(id)\n      selectRequest.onsuccess = (e:any) => {\n        resolve(e.target.result)\n      }\n      selectRequest.onerror = (e:any) => {\n        reject(e.target.result)\n      }\n    })\n  }\n  selectAll(){\n    return new Promise((resolve,reject)=>{\n      const selectRequest = this.request().getAll()\n      selectRequest.onsuccess = (e:any) => {\n        resolve(e.target.result)\n      }\n      selectRequest.onerror = (e:any) => {\n        reject(e.target.result)\n      }\n    })\n  }\n  // some \n  some(index: any, start:any, end:any) {\n  return new Promise((resolve, reject) => {\n    const temp:any = [];\n    const cursor =  this.request().index(index);\n    const range = IDBKeyRange.bound(start, end)\n    cursor.openCursor(range).onsuccess = (ev:any ) => {\n       const res = ev.target.result;\n       if(res){\n        temp.push(res.value)\n        res.continue()\n       }else{\n         console.log('数据抽取结束')\n         resolve(temp)\n       }\n    }\n    cursor.openCursor(range).onerror = (ev: any) => {\n      reject(ev)\n    }\n  })\n  }\n  // put \n  update(data: any) {\n    return new Promise( (resolve, reject) => {\n      const updateRequest =  this.request().put(data)\n      updateRequest.onsuccess = (e:any) => {\n        resolve(e)\n      }\n      updateRequest.onerror = (e:any) => {\n        reject(e)\n      }\n    })\n  }\n  // add \n  insert(data: any) {\n   \n    return new Promise( (resolve, reject) => {\n      const addRequest = this.request().add(data)\n      addRequest.onsuccess = (e:any) => {\n        resolve(e)\n      }\n      addRequest.onerror = (e:any) => {\n        reject(e)\n      }\n    }) \n  }\n  // get -> delete\n  delete(selector: any) {\n    return new Promise( (resolve, reject) => {\n      this.select(selector).then( (res: any) => {\n        if(res.length) {\n          res.forEach( (item: any, index: any, arr: any) => {\n            const request = this.request()\n            const keyPath = request.keyPath as string\n            const deleteRequest = request.delete(item[keyPath])\n            deleteRequest.onsuccess = (e: any) => {\n              if(index === arr.length-1) {\n                resolve(e)\n              }\n            }\n            deleteRequest.onerror = (e: any) => {\n              reject(e)\n            }\n          })\n        }\n      })\n    })\n  }\n  clear() {\n    return new Promise( (resolve, reject) => {\n      const deleteRequest = this.request().clear()\n      deleteRequest.onsuccess = (e: any) => {\n        resolve(e)\n      }\n      deleteRequest.onerror = (e: any) => {\n        reject(e)\n      }\n    })\n  }\n}\n","import { DatabaseTable, Database, RuleIndex } from \"./types\";\nimport { Table } from './Table';\ndeclare const window: any;\nexport class TinyDB {\n  openedDB!: IDBOpenDBRequest\n  name: string\n  version!: number \n  tables: Array<DatabaseTable>\n  constructor(config:Database) {\n    const { databaseName, tables} = config\n    this.name = databaseName\n    this.tables = tables\n    this.createTable(this.tables)\n  }\n  createDateBase (name: string, version =1) {\n    const indb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    this.openedDB =  indb.open(name, version)\n  }\n  createTable(tables: Array<DatabaseTable>, version = 1) {  \n      console.log('version create:', version)\n      const indb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n      const conn_request = indb.open(this.name, version)\n      conn_request.onupgradeneeded = (ev:any) => {\n        const db = ev.target.result\n        tables.forEach( (table: DatabaseTable) => {\n          const hadTableNames = Array.from(db.objectStoreNames)\n          if(!hadTableNames.includes(table.name)){\n            const table_info = db.createObjectStore(table.name,{keyPath: table.keyPath, autoIncrement: table.autoIncrement})\n            table.indexs.forEach( item => {\n              this.createIndex(table_info, item)\n            })\n          }\n        })\n      }\n  }\n  deleteTable(tableName: string, version: number){\n    const indb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.indexedDB\n    console.log('version delete:', version)\n    const conn_request = indb.open(this.name, version)\n    conn_request.onupgradeneeded = (ev:any) => {\n      const db = ev.target.result;\n      if(ev.oldVersion< version){\n        console.log('我要删除表')\n        db.deleteObjectStore(tableName)\n      }\n    }\n  }\n  // create index \n  createIndex(table: IDBObjectStore ,option: RuleIndex){\n    table.createIndex(option.index, option.relativeIndex, { unique: option.unique })\n  }\n  connect(name: string = '') {\n    return new Promise<IDBDatabase>((resolve, reject)=> { \n      const indb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB\n      const conn_request = indb.open(this.name, this.version)\n      conn_request.onsuccess = (ev:any) => {\n        resolve(ev.target.result)\n      }\n      conn_request.onerror = (ev:any) => {\n        reject(ev)\n      }\n    })\n  } \n  close() {\n    this.connect().then( (db: IDBDatabase) => {\n      db.close()\n    })\n  }\n  insert(name: string, data: any) {\n    return new Promise( (resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.insert(data).then((res)=> {\n          resolve(res)\n        }).catch( (error) => {\n          reject(error)\n        }); \n      })\n    })\n  }\n  select(name: string, selecter: any){\n    return new Promise((resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.select(selecter).then((res:any) =>{\n          resolve(res)\n        }).catch( (err:any) => {\n          reject(err)\n        })\n      })\n    })\n  }\n  selectId(name:string, id:number){\n    return new Promise((resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.selectId(id).then((res:any) =>{\n          resolve(res)\n        }).catch( (err:any) => {\n          reject(err)\n        })\n      })\n    })\n  }\n  some(name:string, index: any, startIndex: any, endIndex: any) {\n    return new Promise((resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.some(index, startIndex, endIndex).then( (res:any) => {\n          resolve(res)\n        }).catch( (error: any)=> {\n          reject(error)\n        })\n      })\n    })\n  }\n  // exec(way: string, db: IDBDatabase, name: string,  data: any, resolve:Function,  reject:Function) {\n  //   const table = new Table(name, db)\n  //   const ways = ['select', 'insert', 'delete', 'update'] \n  //   if(ways.includes(way)){\n  //     table[way](data).then((res:any) =>{\n  //       resolve(res)\n  //     }).catch( (err:any) => {\n  //       reject(err)\n  //     })\n  //   }\n  // }\n  update(name: string, data: any){\n    return new Promise( (resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.update(data).then((res:any) =>{\n          resolve(res)\n        }).catch( (err:any) => {\n          reject(err)\n        })\n      })\n    })\n  }\n  delete(name: string, data: any) {\n    return new Promise( (resolve,reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.delete(data).then((res:any) =>{\n          resolve(res)\n        }).catch( (err:any) => {\n          reject(err)\n        })\n      })\n    })\n  }\n  selectAll(name: string) {\n    return new Promise( (resolve,reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.selectAll().then((res:any) =>{\n          resolve(res)\n        }).catch( (err:any) => {\n          reject(err)\n        })\n      })\n    })\n  }\n  clearTable(name: string) {\n    return new Promise((resolve, reject) => {\n      this.connect().then( (db: IDBDatabase) => {\n        const table = new Table(name, db)\n        table.clear().then( (res: any) => {\n          resolve(res)\n        }).catch( (error:any) => {\n          reject(error)\n        })\n      })\n    })\n  }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29yZS9NYWluLnRzIiwic3JjL2NvcmUvVGFibGUudHMiLCJzcmMvY29yZS9UaW55REIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUNBQSxJQUFBLFdBQUEsUUFBQSxVQUFBLENBQUE7QUFHQSxJQUFNLHFCQUFxQixTQUFyQixrQkFBcUIsQ0FBUyxTQUFULEVBQXNCO0FBQy9DLFdBQU8sTUFBUCxHQUFnQixTQUFoQjtBQUNELENBRkQ7QUFHQSxtQkFBbUIsU0FBQSxNQUFuQjs7Ozs7OztBQ05BLElBQUEsUUFBQSxhQUFBLFlBQUE7QUFHRSxhQUFBLEtBQUEsQ0FBWSxJQUFaLEVBQTBCLEVBQTFCLEVBQXdDO0FBQ3RDLGFBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxhQUFLLEVBQUwsR0FBVSxFQUFWO0FBQ0Q7QUFDRDtBQUNBLFVBQUEsU0FBQSxDQUFBLFdBQUEsR0FBQSxVQUFZLElBQVosRUFBdUI7QUFBWCxZQUFBLFNBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQSxtQkFBQSxJQUFBO0FBQVc7QUFDckIsZUFBTyxLQUFLLEVBQUwsQ0FBUSxXQUFSLENBQW9CLENBQUMsS0FBSyxJQUFOLENBQXBCLEVBQWlDLFNBQVMsSUFBVCxHQUFnQixXQUFoQixHQUE4QixVQUEvRCxDQUFQO0FBQ0QsS0FGRDtBQUdBO0FBQ0EsVUFBQSxTQUFBLENBQUEsT0FBQSxHQUFBLFlBQUE7QUFDRSxlQUFPLEtBQUssV0FBTCxHQUFtQixXQUFuQixDQUErQixLQUFLLElBQXBDLENBQVA7QUFDRCxLQUZEO0FBR0E7QUFDQSxVQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsVUFBTyxRQUFQLEVBQW9CO0FBQXBCLFlBQUEsUUFBQSxJQUFBO0FBQ0UsZ0JBQVEsR0FBUixDQUFZLENBQVo7QUFDQSxZQUFJLEtBQUo7QUFDQSxZQUFJLFVBQUo7QUFDQSxhQUFJLElBQUksTUFBUixJQUFpQixRQUFq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Z0IsRUFBaEIsQ0FBZDtBQUNBLHNCQUFNLEtBQU4sR0FBYyxJQUFkLENBQW9CLFVBQUMsR0FBRCxFQUFTO0FBQzNCLDRCQUFRLEdBQVI7QUFDRCxpQkFGRCxFQUVHLEtBRkgsQ0FFVSxVQUFDLEtBQUQsRUFBVTtBQUNsQiwyQkFBTyxLQUFQO0FBQ0QsaUJBSkQ7QUFLRCxhQVBEO0FBUUQsU0FUTSxDQUFQO0FBVUQsS0FYRDtBQVlGLFdBQUEsTUFBQTtBQUFDLENBNUtELEVBQUE7QUFBYSxRQUFBLE1BQUEsR0FBQSxNQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IHsgVGlueURCIH0gZnJvbSBcIi4vVGlueURCXCI7XG5cblxuY29uc3QgZXhwb3J0R2xvYmFsT2JqZWN0ID0gZnVuY3Rpb24oaW5kZXhlZERCOmFueSl7XG4gIHdpbmRvdy5UaW55REIgPSBpbmRleGVkREJcbn1cbmV4cG9ydEdsb2JhbE9iamVjdChUaW55REIpIiwiZXhwb3J0IGNsYXNzIFRhYmxlIHtcbiAgbmFtZTogc3RyaW5nXG4gIGRiOiBJREJEYXRhYmFzZVxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGRiOklEQkRhdGFiYXNlKXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy5kYiA9IGRiXG4gIH1cbiAgLy8gY3JlYXRlIHRyYW5zYWN0aW9uIFxuICB0cmFuc2FjdGlvbihtb2RlID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLmRiLnRyYW5zYWN0aW9uKFt0aGlzLm5hbWVdLCBtb2RlID09PSB0cnVlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKVxuICB9XG4gIC8vIG9wZW4gb3IgY29ubnRlY3QgdGhpcyB0YWJsZSBcbiAgcmVxdWVzdCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbigpLm9iamVjdFN0b3JlKHRoaXMubmFtZSlcbiAgfVxuICAvLyBnZXRcbiAgc2VsZWN0KHNlbGVjdG9yOiBhbnkpe1xuICAgIGNvbnNvbGUubG9nKDEpXG4gICAgbGV0IGluZGV4OiBzdHJpbmdcbiAgICBsZXQgaW5kZXhWYWx1ZTogYW55XG4gICAgZm9yKGxldCBuYW1lIGluICBzZWxlY3Rvcil7XG4gICAgICBpbmRleCA9IG5hbWU7XG4gICAgICBpbmRleFZhbHVlID0gc2VsZWN0b3JbbmFtZV1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntcbiAgICAgIGNvbnN0IHNlbGVjdFJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKS5pbmRleChpbmRleCkuZ2V0QWxsKGluZGV4VmFsdWUpXG4gICAgICBzZWxlY3RSZXF1ZXN0Lm9uc3VjY2VzcyA9IChlOmFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHNlbGVjdFJlcXVlc3Qub25lcnJvciA9IChlOmFueSkgPT4ge1xuICAgICAgICByZWplY3QoZS50YXJnZXQucmVzdWx0KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgc2VsZWN0SWQoaWQ6bnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntcbiAgICAgIGNvbnN0IHNlbGVjdFJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKS5nZXQoaWQpXG4gICAgICBzZWxlY3RSZXF1ZXN0Lm9uc3VjY2VzcyA9IChlOmFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH1cbiAgICAgIHNlbGVjdFJlcXVlc3Qub25lcnJvciA9IChlOmFueSkgPT4ge1xuICAgICAgICByZWplY3QoZS50YXJnZXQucmVzdWx0KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgc2VsZWN0QWxsKCl7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntcbiAgICAgIGNvbnN0IHNlbGVjdFJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKS5nZXRBbGwoKVxuICAgICAgc2VsZWN0UmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTphbnkpID0+IHtcbiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpXG4gICAgICB9XG4gICAgICBzZWxlY3RSZXF1ZXN0Lm9uZXJyb3IgPSAoZTphbnkpID0+IHtcbiAgICAgICAgcmVqZWN0KGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIC8vIHNvbWUgXG4gIHNvbWUoaW5kZXg6IGFueSwgc3RhcnQ6YW55LCBlbmQ6YW55KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgdGVtcDphbnkgPSBbXTtcbiAgICBjb25zdCBjdXJzb3IgPSAgdGhpcy5yZXF1ZXN0KCkuaW5kZXgoaW5kZXgpO1xuICAgIGNvbnN0IHJhbmdlID0gSURCS2V5UmFuZ2UuYm91bmQoc3RhcnQsIGVuZClcbiAgICBjdXJzb3Iub3BlbkN1cnNvcihyYW5nZSkub25zdWNjZXNzID0gKGV2OmFueSApID0+IHtcbiAgICAgICBjb25zdCByZXMgPSBldi50YXJnZXQucmVzdWx0O1xuICAgICAgIGlmKHJlcyl7XG4gICAgICAgIHRlbXAucHVzaChyZXMudmFsdWUpXG4gICAgICAgIHJlcy5jb250aW51ZSgpXG4gICAgICAgfWVsc2V7XG4gICAgICAgICBjb25zb2xlLmxvZygn5pWw5o2u5oq95Y+W57uT5p2fJylcbiAgICAgICAgIHJlc29sdmUodGVtcClcbiAgICAgICB9XG4gICAgfVxuICAgIGN1cnNvci5vcGVuQ3Vyc29yKHJhbmdlKS5vbmVycm9yID0gKGV2OiBhbnkpID0+IHtcbiAgICAgIHJlamVjdChldilcbiAgICB9XG4gIH0pXG4gIH1cbiAgLy8gcHV0IFxuICB1cGRhdGUoZGF0YTogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVSZXF1ZXN0ID0gIHRoaXMucmVxdWVzdCgpLnB1dChkYXRhKVxuICAgICAgdXBkYXRlUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTphbnkpID0+IHtcbiAgICAgICAgcmVzb2x2ZShlKVxuICAgICAgfVxuICAgICAgdXBkYXRlUmVxdWVzdC5vbmVycm9yID0gKGU6YW55KSA9PiB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgLy8gYWRkIFxuICBpbnNlcnQoZGF0YTogYW55KSB7XG4gICBcbiAgICByZXR1cm4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGFkZFJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKS5hZGQoZGF0YSlcbiAgICAgIGFkZFJlcXVlc3Qub25zdWNjZXNzID0gKGU6YW55KSA9PiB7XG4gICAgICAgIHJlc29sdmUoZSlcbiAgICAgIH1cbiAgICAgIGFkZFJlcXVlc3Qub25lcnJvciA9IChlOmFueSkgPT4ge1xuICAgICAgICByZWplY3QoZSlcbiAgICAgIH1cbiAgICB9KSBcbiAgfVxuICAvLyBnZXQgLT4gZGVsZXRlXG4gIGRlbGV0ZShzZWxlY3RvcjogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdChzZWxlY3RvcikudGhlbiggKHJlczogYW55KSA9PiB7XG4gICAgICAgIGlmKHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXMuZm9yRWFjaCggKGl0ZW06IGFueSwgaW5kZXg6IGFueSwgYXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoKVxuICAgICAgICAgICAgY29uc3Qga2V5UGF0aCA9IHJlcXVlc3Qua2V5UGF0aCBhcyBzdHJpbmdcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZVJlcXVlc3QgPSByZXF1ZXN0LmRlbGV0ZShpdGVtW2tleVBhdGhdKVxuICAgICAgICAgICAgZGVsZXRlUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgIGlmKGluZGV4ID09PSBhcnIubGVuZ3RoLTEpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZVJlcXVlc3Qub25lcnJvciA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIGNsZWFyKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZGVsZXRlUmVxdWVzdCA9IHRoaXMucmVxdWVzdCgpLmNsZWFyKClcbiAgICAgIGRlbGV0ZVJlcXVlc3Qub25zdWNjZXNzID0gKGU6IGFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKGUpXG4gICAgICB9XG4gICAgICBkZWxldGVSZXF1ZXN0Lm9uZXJyb3IgPSAoZTogYW55KSA9PiB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFiYXNlVGFibGUsIERhdGFiYXNlLCBSdWxlSW5kZXggfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tICcuL1RhYmxlJztcbmRlY2xhcmUgY29uc3Qgd2luZG93OiBhbnk7XG5leHBvcnQgY2xhc3MgVGlueURCIHtcbiAgb3BlbmVkREIhOiBJREJPcGVuREJSZXF1ZXN0XG4gIG5hbWU6IHN0cmluZ1xuICB2ZXJzaW9uITogbnVtYmVyIFxuICB0YWJsZXM6IEFycmF5PERhdGFiYXNlVGFibGU+XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzpEYXRhYmFzZSkge1xuICAgIGNvbnN0IHsgZGF0YWJhc2VOYW1lLCB0YWJsZXN9ID0gY29uZmlnXG4gICAgdGhpcy5uYW1lID0gZGF0YWJhc2VOYW1lXG4gICAgdGhpcy50YWJsZXMgPSB0YWJsZXNcbiAgICB0aGlzLmNyZWF0ZVRhYmxlKHRoaXMudGFibGVzKVxuICB9XG4gIGNyZWF0ZURhdGVCYXNlIChuYW1lOiBzdHJpbmcsIHZlcnNpb24gPTEpIHtcbiAgICBjb25zdCBpbmRiID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCO1xuICAgIHRoaXMub3BlbmVkREIgPSAgaW5kYi5vcGVuKG5hbWUsIHZlcnNpb24pXG4gIH1cbiAgY3JlYXRlVGFibGUodGFibGVzOiBBcnJheTxEYXRhYmFzZVRhYmxlPiwgdmVyc2lvbiA9IDEpIHsgIFxuICAgICAgY29uc29sZS5sb2coJ3ZlcnNpb24gY3JlYXRlOicsIHZlcnNpb24pXG4gICAgICBjb25zdCBpbmRiID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCO1xuICAgICAgY29uc3QgY29ubl9yZXF1ZXN0ID0gaW5kYi5vcGVuKHRoaXMubmFtZSwgdmVyc2lvbilcbiAgICAgIGNvbm5fcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoZXY6YW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGRiID0gZXYudGFyZ2V0LnJlc3VsdFxuICAgICAgICB0YWJsZXMuZm9yRWFjaCggKHRhYmxlOiBEYXRhYmFzZVRhYmxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgaGFkVGFibGVOYW1lcyA9IEFycmF5LmZyb20oZGIub2JqZWN0U3RvcmVOYW1lcylcbiAgICAgICAgICBpZighaGFkVGFibGVOYW1lcy5pbmNsdWRlcyh0YWJsZS5uYW1lKSl7XG4gICAgICAgICAgICBjb25zdCB0YWJsZV9pbmZvID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUodGFibGUubmFtZSx7a2V5UGF0aDogdGFibGUua2V5UGF0aCwgYXV0b0luY3JlbWVudDogdGFibGUuYXV0b0luY3JlbWVudH0pXG4gICAgICAgICAgICB0YWJsZS5pbmRleHMuZm9yRWFjaCggaXRlbSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlSW5kZXgodGFibGVfaW5mbywgaXRlbSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICB9XG4gIGRlbGV0ZVRhYmxlKHRhYmxlTmFtZTogc3RyaW5nLCB2ZXJzaW9uOiBudW1iZXIpe1xuICAgIGNvbnN0IGluZGIgPSB3aW5kb3cuaW5kZXhlZERCIHx8IHdpbmRvdy5tb3pJbmRleGVkREIgfHwgd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCB3aW5kb3cuaW5kZXhlZERCXG4gICAgY29uc29sZS5sb2coJ3ZlcnNpb24gZGVsZXRlOicsIHZlcnNpb24pXG4gICAgY29uc3QgY29ubl9yZXF1ZXN0ID0gaW5kYi5vcGVuKHRoaXMubmFtZSwgdmVyc2lvbilcbiAgICBjb25uX3JlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2OmFueSkgPT4ge1xuICAgICAgY29uc3QgZGIgPSBldi50YXJnZXQucmVzdWx0O1xuICAgICAgaWYoZXYub2xkVmVyc2lvbjwgdmVyc2lvbil7XG4gICAgICAgIGNvbnNvbGUubG9nKCfmiJHopoHliKDpmaTooagnKVxuICAgICAgICBkYi5kZWxldGVPYmplY3RTdG9yZSh0YWJsZU5hbWUpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNyZWF0ZSBpbmRleCBcbiAgY3JlYXRlSW5kZXgodGFibGU6IElEQk9iamVjdFN0b3JlICxvcHRpb246IFJ1bGVJbmRleCl7XG4gICAgdGFibGUuY3JlYXRlSW5kZXgob3B0aW9uLmluZGV4LCBvcHRpb24ucmVsYXRpdmVJbmRleCwgeyB1bmlxdWU6IG9wdGlvbi51bmlxdWUgfSlcbiAgfVxuICBjb25uZWN0KG5hbWU6IHN0cmluZyA9ICcnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPElEQkRhdGFiYXNlPigocmVzb2x2ZSwgcmVqZWN0KT0+IHsgXG4gICAgICBjb25zdCBpbmRiID0gd2luZG93LmluZGV4ZWREQiB8fCB3aW5kb3cubW96SW5kZXhlZERCIHx8IHdpbmRvdy53ZWJraXRJbmRleGVkREIgfHwgd2luZG93Lm1zSW5kZXhlZERCXG4gICAgICBjb25zdCBjb25uX3JlcXVlc3QgPSBpbmRiLm9wZW4odGhpcy5uYW1lLCB0aGlzLnZlcnNpb24pXG4gICAgICBjb25uX3JlcXVlc3Qub25zdWNjZXNzID0gKGV2OmFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKGV2LnRhcmdldC5yZXN1bHQpXG4gICAgICB9XG4gICAgICBjb25uX3JlcXVlc3Qub25lcnJvciA9IChldjphbnkpID0+IHtcbiAgICAgICAgcmVqZWN0KGV2KVxuICAgICAgfVxuICAgIH0pXG4gIH0gXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuY29ubmVjdCgpLnRoZW4oIChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgIGRiLmNsb3NlKClcbiAgICB9KVxuICB9XG4gIGluc2VydChuYW1lOiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSggKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0KCkudGhlbiggKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZShuYW1lLCBkYilcbiAgICAgICAgdGFibGUuaW5zZXJ0KGRhdGEpLnRoZW4oKHJlcyk9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pLmNhdGNoKCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0pOyBcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICBzZWxlY3QobmFtZTogc3RyaW5nLCBzZWxlY3RlcjogYW55KXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0KCkudGhlbiggKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZShuYW1lLCBkYilcbiAgICAgICAgdGFibGUuc2VsZWN0KHNlbGVjdGVyKS50aGVuKChyZXM6YW55KSA9PntcbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfSkuY2F0Y2goIChlcnI6YW55KSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICBzZWxlY3RJZChuYW1lOnN0cmluZywgaWQ6bnVtYmVyKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jb25uZWN0KCkudGhlbiggKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZShuYW1lLCBkYilcbiAgICAgICAgdGFibGUuc2VsZWN0SWQoaWQpLnRoZW4oKHJlczphbnkpID0+e1xuICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICB9KS5jYXRjaCggKGVycjphbnkpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIHNvbWUobmFtZTpzdHJpbmcsIGluZGV4OiBhbnksIHN0YXJ0SW5kZXg6IGFueSwgZW5kSW5kZXg6IGFueSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3QoKS50aGVuKCAoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gbmV3IFRhYmxlKG5hbWUsIGRiKVxuICAgICAgICB0YWJsZS5zb21lKGluZGV4LCBzdGFydEluZGV4LCBlbmRJbmRleCkudGhlbiggKHJlczphbnkpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfSkuY2F0Y2goIChlcnJvcjogYW55KT0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgLy8gZXhlYyh3YXk6IHN0cmluZywgZGI6IElEQkRhdGFiYXNlLCBuYW1lOiBzdHJpbmcsICBkYXRhOiBhbnksIHJlc29sdmU6RnVuY3Rpb24sICByZWplY3Q6RnVuY3Rpb24pIHtcbiAgLy8gICBjb25zdCB0YWJsZSA9IG5ldyBUYWJsZShuYW1lLCBkYilcbiAgLy8gICBjb25zdCB3YXlzID0gWydzZWxlY3QnLCAnaW5zZXJ0JywgJ2RlbGV0ZScsICd1cGRhdGUnXSBcbiAgLy8gICBpZih3YXlzLmluY2x1ZGVzKHdheSkpe1xuICAvLyAgICAgdGFibGVbd2F5XShkYXRhKS50aGVuKChyZXM6YW55KSA9PntcbiAgLy8gICAgICAgcmVzb2x2ZShyZXMpXG4gIC8vICAgICB9KS5jYXRjaCggKGVycjphbnkpID0+IHtcbiAgLy8gICAgICAgcmVqZWN0KGVycilcbiAgLy8gICAgIH0pXG4gIC8vICAgfVxuICAvLyB9XG4gIHVwZGF0ZShuYW1lOiBzdHJpbmcsIGRhdGE6IGFueSl7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3QoKS50aGVuKCAoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gbmV3IFRhYmxlKG5hbWUsIGRiKVxuICAgICAgICB0YWJsZS51cGRhdGUoZGF0YSkudGhlbigocmVzOmFueSkgPT57XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pLmNhdGNoKCAoZXJyOmFueSkgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgZGVsZXRlKG5hbWU6IHN0cmluZywgZGF0YTogYW55KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSxyZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdCgpLnRoZW4oIChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBuZXcgVGFibGUobmFtZSwgZGIpXG4gICAgICAgIHRhYmxlLmRlbGV0ZShkYXRhKS50aGVuKChyZXM6YW55KSA9PntcbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfSkuY2F0Y2goIChlcnI6YW55KSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuICBzZWxlY3RBbGwobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCAocmVzb2x2ZSxyZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdCgpLnRoZW4oIChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBuZXcgVGFibGUobmFtZSwgZGIpXG4gICAgICAgIHRhYmxlLnNlbGVjdEFsbCgpLnRoZW4oKHJlczphbnkpID0+e1xuICAgICAgICAgIHJlc29sdmUocmVzKVxuICAgICAgICB9KS5jYXRjaCggKGVycjphbnkpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIGNsZWFyVGFibGUobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY29ubmVjdCgpLnRoZW4oIChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBuZXcgVGFibGUobmFtZSwgZGIpXG4gICAgICAgIHRhYmxlLmNsZWFyKCkudGhlbiggKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXMpXG4gICAgICAgIH0pLmNhdGNoKCAoZXJyb3I6YW55KSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG4iXX0="}