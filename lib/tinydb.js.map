{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/core/Table.ts","src/core/TinyDB.ts","src/core/index.ts"],"names":[],"mappings":"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","file":"tinydb.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ITinyDB } from \"./types/index\";\n\n// 操作 table 使用\nexport default class Table {\n  static of(option: ITinyDB.IInvokeTable) {\n    return new Table(option)\n  }\n  private name: string\n  private db: IDBDatabase | undefined;\n  private mode: ITinyDB.IOperateMode = 'readwrite'\n  constructor(option: ITinyDB.IInvokeTable) {\n    const { name, db } = option\n    this.name = name\n    this.db = db\n  }\n  setMode(mode: ITinyDB.IOperateMode) {\n    this.mode = mode\n  }\n  getMode() {\n    return this.mode\n  }\n  // create transaction \n  transaction(name: string) {\n    const transaction = this.db.transaction([name], this.getMode())\n    return transaction\n  }\n  // open or conntect this table \n  requestStore() {\n    const { name } = this\n    return this.transaction(name).objectStore(name)\n  }\n  insert(record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const addRequest = this.requestStore().put(record)\n      const unlisten = () => {\n        addRequest.removeEventListener('success', success)\n        addRequest.removeEventListener('error', error)\n      }\n      const success = () => {\n        resolve({\n          msg: 'add one record successfully!',\n          status: true\n        })\n        unlisten()\n      }\n      const error = () => {\n        resolve({\n          msg: 'add one record failed!',\n          status: false\n        })\n      }\n      addRequest.addEventListener('success', success)\n      addRequest.addEventListener('error', error)\n    })\n    return promise\n  }\n  update(index: ITinyDB.IValidateKey, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().get(index);\n      getRequest.onsuccess = () => {\n        const data = getRequest.result\n        const update_data = {\n          ...data,\n          ...record\n        }\n        const updateRequest = this.requestStore().put(update_data);\n        updateRequest.onsuccess = () => {\n          resolve({\n            msg: 'update successfully!',\n            activedRequest: updateRequest\n          })\n        }\n        updateRequest.onerror = () => {\n          reject({\n            msg: 'update failed!',\n            activedRequest: updateRequest\n          })\n        }\n      }\n      getRequest.onerror = () => {\n        reject({\n          msg: 'get failed!',\n          activedRequest: getRequest\n        })\n      }\n    })\n    return promise\n  }\n  getByPrimaryKey(id: ITinyDB.IValidateKey) {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().get(id)\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject(getRequest.result)\n      }\n    })\n  }\n  getByIndex(option: ITinyDB.IGetIndex) {\n    const { index, value } = option\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().index(index).getAll(value)\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject(getRequest.result)\n      }\n    })\n  }\n  getAll() {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().getAll()\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject(getRequest.result)\n      }\n    })\n  }\n  some(option: ITinyDB.ISomeOptions) {\n    const { index, lower, upper } = option\n    return new Promise((resolve, reject) => {\n      const cache: any = [];\n      const cursor = this.requestStore().index(index);\n      const range = IDBKeyRange.bound(lower, upper)\n      const rangeRequest = cursor.openCursor(range)\n      rangeRequest.onsuccess = () => {\n        const result = rangeRequest.result;\n        if (result) {\n          cache.push(result.value)\n          result.continue()\n        } else {\n          resolve(cache)\n        }\n      }\n      rangeRequest.onerror = () => {\n        reject(rangeRequest.error)\n      }\n    })\n  }\n  deleteRecord(option: ITinyDB.IGetIndex) {\n    return new Promise((resolve, reject) => {\n      this.getByIndex(option).then((data: any[]) => {\n\n        if (!data.length) {\n          return console.warn('not find this record')\n        }\n\n        for (const item of data) {\n          const store = this.requestStore()\n          const { keyPath } = store\n          const deleteRequest = store.delete(item[keyPath as string])\n          deleteRequest.onsuccess = () => {\n            resolve({\n              msg: 'delete successfully!',\n              status: true\n            })\n          }\n          deleteRequest.onerror = () => {\n            reject({\n              msg: 'delete failed!',\n              status: false\n            })\n          }\n        }\n      })\n    })\n  }\n  clear() {\n    return new Promise( (resolve, reject) => {\n      const clearRequest = this.requestStore().clear()\n      clearRequest.onsuccess = () => {\n        resolve({\n          msg: 'clear successfully!',\n          status: true\n        })\n      }\n      clearRequest.onerror = () => {\n        reject({\n          msg: 'clear failed!',\n          status: false\n        })\n      }\n    })\n  }\n  destroyed() {\n    this.db = undefined\n    this.name = ''\n  }\n}","import Table from \"./Table\";\nimport { ITinyDB } from \"./types/index\";\n\n\nconst IN_DB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n\nexport default class TinyDB {\n  private dbName: string;\n  private version: number;\n  private db: IDBDatabase\n  static of() {\n    return new TinyDB\n  }\n  constructor() { }\n  setup(options: ITinyDB.IDatabase) {\n    const { dbName } = options\n    this.dbName = dbName\n    return this;\n  }\n  getVersion() {\n    return this.version ? this.version : 1\n  }\n  setVersion(version: number) {\n    this.version = version\n  }\n  upgrade() {\n\n  }\n  createTable(options: ITinyDB.ITableConfig[] = undefined) {\n    const { dbName } = this\n    const that = this\n\n    if (options === undefined) {\n      return console.error('database table config must a list')\n    }\n\n    const request = IN_DB.open(dbName, this.getVersion())\n\n\n    const unlisten = () => {\n      request.removeEventListener('upgradeneeded', upgrade);\n    };\n\n    const upgrade = () => {\n      console.log('upgrade')\n      const db = request.result\n      for (const table of options) {\n        if (!db.objectStoreNames.contains(table.name)) {\n          const record = db.createObjectStore(table.name, {\n            keyPath: table.keyPath,\n            autoIncrement: table.autoIncrement ? true : false\n          })\n          if (table.indexs && table.indexs.length !== 0) {\n            for (const index of table.indexs) {\n              record.createIndex(index.index, index.relativeIndex, { unique: index.unique })\n            }\n          }\n        }\n      }\n      that.setVersion(db.version)\n      unlisten()\n    }\n\n    request.addEventListener('upgradeneeded', upgrade)\n\n    const promise = new Promise((resolve, reject) => {\n      this.connect(request).then(db => {\n        const versionChange = (evt: IDBVersionChangeEvent) => {\n          console.log('versionchange')\n          db.close()\n          db.removeEventListener('versionchange', versionChange)\n        }\n        db.addEventListener('versionchange', versionChange)\n      })\n    })\n    return promise\n  }\n  deleteDatabase(name: string) {\n   \n    const request = IN_DB.deleteDatabase(name)\n    const promise = new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        console.log(222)\n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted successfully',\n          status: true\n        }\n        resolve(msg)\n      }\n      request.onerror = () => {\n        \n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted failed',\n          status: true,\n          activedRequest: request\n        }\n        reject(msg)\n      }\n    })\n    return promise\n  }\n  connect<T>(request: IDBRequest<T>, options?: ITinyDB.IRequestCallback): Promise<T> {\n\n    const promise = new Promise<T>((resolve, reject) => {\n\n      const unlisten = () => {\n        request.removeEventListener('success', success);\n        request.removeEventListener('error', error);\n      };\n\n      const success = () => {\n        if (options && options.successfully) {\n          options.successfully(request)\n        }\n        resolve(request.result);\n        unlisten()\n      }\n      const blocked = () => {\n        if (options && options.blocked) {\n          options.blocked(request)\n        }\n        console.log('connect blocked')\n      }\n\n      const error = () => {\n        if (options && options.error) {\n          options.error(request)\n        }\n\n        reject(request.error);\n        unlisten()\n      }\n      request.addEventListener('success', success)\n      request.addEventListener('error', error)\n      request.addEventListener('blocked', blocked)\n    })\n\n    return promise\n  }\n  insert(table_name: string, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.insert(record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  update(table_name: string, index: ITinyDB.IValidateKey, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.update(index, record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getAll(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getAll().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByPrimaryKey(table_name: string, key: ITinyDB.IValidateKey) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByPrimaryKey(key).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByIndex(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByIndex(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  deleteRecord(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.deleteRecord(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  some(table_name: string, options: ITinyDB.ISomeOptions) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.some(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  clearTableRecord(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.clear().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n}\n\n","import TinyDB from \"./TinyDB\";\n\nwindow.TinyDB = TinyDB\n\nexport {\n  TinyDB \n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}