{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/core/Table.ts","src/core/TinyDB.ts","src/core/index.ts"],"names":[],"mappings":"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","file":"tinydb.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ITinyDB } from \"./types/index\";\n\n// 操作 table 使用\nexport default class Table {\n  static of(option: ITinyDB.IInvokeTable) {\n    return new Table(option)\n  }\n  private name: string\n  private db: IDBDatabase | undefined;\n  private mode: ITinyDB.IOperateMode = 'readwrite'\n  constructor(option: ITinyDB.IInvokeTable) {\n    const { name, db } = option\n    this.name = name\n    this.db = db\n  }\n  setMode(mode: ITinyDB.IOperateMode) {\n    this.mode = mode\n    return this\n  }\n  getMode() {\n    return this.mode\n  }\n  // create transaction \n  transaction(name: string) {\n    const transaction = this.db.transaction([name], this.getMode())\n    return transaction\n  }\n  // open or conntect this table \n  requestStore() {\n    const { name } = this\n    return this.transaction(name).objectStore(name)\n  }\n  insert(record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const addRequest = this.requestStore().add(record)\n      const unlisten = () => {\n        addRequest.removeEventListener('success', success)\n        addRequest.removeEventListener('error', error)\n      }\n      const success = () => {\n        resolve({\n          msg: 'add one record successfully!',\n          status: true,\n          // activedRequest: addRequest\n        })\n        unlisten()\n      }\n      const error = () => {\n        reject({\n          msg: 'add one record failed!',\n          status: false,\n          activedRequest: addRequest\n        })\n      }\n      addRequest.addEventListener('success', success)\n      addRequest.addEventListener('error', error)\n    })\n    return promise\n  }\n  update(option: ITinyDB.IGetIndex, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const { index, value } = option\n      this.getByIndex(option).then((result: any[]) => {\n        if (!result.length) {\n          console.warn('not found this record')\n          resolve([])\n        }\n        for (const item of result) {\n          const store = this.requestStore()\n          const newRecord = {\n            ...item,\n            ...record\n          }\n          const updateRequest = store.put(newRecord)\n          updateRequest.onsuccess = () => {\n            resolve({\n              msg: 'update successfully!',\n              status: true,\n            })\n          }\n          updateRequest.onerror = () => {\n            reject({\n              msg: 'update failed!',\n              status: false,\n              activedRequest: updateRequest\n            })\n          }\n        }\n      })\n    })\n    return promise\n  }\n  getByPrimaryKey(primaryKey: ITinyDB.IValidateKey) {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().get(primaryKey)\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject({\n          msg: 'not found this primary key!',\n          status: false,\n          activedRequest: getRequest\n        })\n      }\n    })\n  }\n  getByIndex(option: ITinyDB.IGetIndex) {\n\n    if(!option || !option.value) {\n      return Promise.reject({\n        msg: 'must have one index!',\n      })\n    }\n    const { index, value } = option\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().index(index).getAll(value)\n      getRequest.onsuccess = () => {\n        if(getRequest.result.length) {\n          resolve(getRequest.result)\n        } else {\n          console.warn('not find record!')\n          resolve([])\n        }\n      }\n      getRequest.onerror = () => {\n        reject({\n          msg: 'not found this index!',\n          status: false,\n          activedRequest: getRequest\n        })\n      }\n    })\n  }\n  getAll() {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().getAll()\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject(getRequest.result)\n      }\n    })\n  }\n  limit(option: ITinyDB.ILimt) {\n    const { length, start } = option\n    let index = start || 0\n    let limit = length\n    \n    if(!option || !option.length) {\n      throw console.error('please set length')\n    }\n    return new Promise((resolve, reject) => {\n      let current = []\n      const cursorRequest = this.requestStore().openCursor()\n      cursorRequest.onsuccess = () => {\n        const cursor = cursorRequest.result as IDBCursorWithValue;\n        if(cursor) {\n          if(cursor.key > index && limit) {\n            current.push(cursor.value)\n            limit --\n          }\n          if(limit !== 0) {\n            cursor.continue()\n          }else {\n            resolve(current)\n          }\n        } else {\n          resolve(current)\n        }\n      }\n      cursorRequest.onerror = () => {\n        const cursorError = cursorRequest.error;\n        reject(cursorError)\n      }\n    })\n  }\n  some(option: ITinyDB.ISomeOptions) {\n    const { index, lower, upper } = option\n    return new Promise((resolve, reject) => {\n      const cache: any = [];\n      const indexs = this.requestStore().index(index);\n      const range = IDBKeyRange.bound(lower, upper)\n      const cursorRangeRequest = indexs.openCursor(range)\n      cursorRangeRequest.onsuccess = () => {\n        const result = cursorRangeRequest.result;\n        if (result) {\n          cache.push(result.value)\n          result.continue()\n        } else {\n          resolve(cache)\n        }\n      }\n      cursorRangeRequest.onerror = () => {\n        reject(cursorRangeRequest.error)\n      }\n    })\n  }\n  deleteRecord(option: ITinyDB.IGetIndex){\n    return new Promise((resolve, reject) => {\n      this.getByIndex(option).then((data: any[]) => {\n\n        if (!data.length) {\n          console.warn('not find this record')\n          return false\n        }\n\n        for (const item of data) {\n          const store = this.requestStore()\n          const { keyPath } = store\n          const deleteRequest = store.delete(item[keyPath as string])\n          deleteRequest.onsuccess = () => {\n            resolve({\n              msg: 'delete successfully!',\n              status: true\n            })\n          }\n          deleteRequest.onerror = () => {\n            reject({\n              msg: 'delete failed!',\n              status: false\n            })\n          }\n        }\n      })\n    })\n  }\n  clear() {\n    return new Promise((resolve, reject) => {\n      const clearRequest = this.requestStore().clear()\n      clearRequest.onsuccess = () => {\n        resolve({\n          msg: 'clear successfully!',\n          status: true\n        })\n      }\n      clearRequest.onerror = () => {\n        reject({\n          msg: 'clear failed!',\n          status: false,\n          activedRequest: clearRequest\n        })\n      }\n    })\n  }\n  destroyed() {\n    this.db = undefined\n    this.name = ''\n  }\n}","import Table from \"./Table\";\nimport { ITinyDB } from \"./types/index\";\n\n\nconst win = (typeof window == \"undefined\" ? global : window);\n\nconst IN_DB = win.indexedDB\n\nexport default class TinyDB {\n  private dbName: string;\n  private version: number;\n  private db: IDBDatabase\n  static of() {\n    return new TinyDB\n  }\n  constructor() { }\n  setup(options: ITinyDB.IDatabase) {\n    const { dbName } = options\n    this.dbName = dbName\n    return this;\n  }\n  getVersion() {\n    return this.version ? this.version : 1\n  }\n  setVersion(version: number) {\n    this.version = version\n    return this\n  }\n  upgrade(db: IDBDatabase, options: ITinyDB.ITableConfig[]) {\n    this.setVersion(db.version)\n    this.db = db\n\n    for (const table of options) {\n      if (!db.objectStoreNames.contains(table.name)) {\n        const store = db.createObjectStore(table.name, {\n          keyPath: table.primaryKey,\n          autoIncrement: table.autoIncrement ? true : false\n        })\n        if (table.indexs && table.indexs.length !== 0) {\n          for (const index of table.indexs) {\n            this.createIndex(store, {\n              index: index.index,\n              relativeIndex: index.relativeIndex,\n              unique: index.unique\n            })\n          }\n        }\n      }\n    }\n  }\n  createIndex(db: IDBObjectStore, options: ITinyDB.IIndex) {\n    db.createIndex(options.index, options.relativeIndex, { unique: options.unique })\n  }\n  createTable(options: ITinyDB.ITableConfig[] = undefined) {\n    const { dbName } = this\n\n    if (options === undefined) {\n      return console.error('database table config must a list')\n    }\n\n    const request = IN_DB.open(dbName, this.getVersion())\n\n    const unlisten = () => {\n      request.removeEventListener('upgradeneeded', upgrade);\n    };\n\n    const upgrade = () => {\n      this.upgrade(request.result, options)\n      unlisten()\n    }\n\n    request.addEventListener('upgradeneeded', upgrade)\n\n    const promise = new Promise((resolve, reject) => {\n      this.connect(request).then(db => {\n        const versionChange = (evt: IDBVersionChangeEvent) => {\n          db.close()\n          db.removeEventListener('versionchange', versionChange)\n        }\n        db.addEventListener('versionchange', versionChange)\n      })\n    })\n    return promise\n  }\n  deleteDatabase(name: string) {\n   \n    const request = IN_DB.deleteDatabase(name)\n    const promise = new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted successfully',\n          status: true\n        }\n        resolve(msg)\n      }\n      request.onerror = () => {\n        \n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted failed',\n          status: true,\n          activedRequest: request\n        }\n        reject(msg)\n      }\n    })\n    return promise\n  }\n  connect<T>(request: IDBRequest<T>, options?: ITinyDB.IRequestCallback): Promise<T> {\n\n    const promise = new Promise<T>((resolve, reject) => {\n\n      const unlisten = () => {\n        request.removeEventListener('success', success);\n        request.removeEventListener('error', error);\n      };\n\n      const success = () => {\n        if (options && options.successfully) {\n          options.successfully(request)\n        }\n        resolve(request.result);\n        unlisten()\n      }\n      const blocked = () => {\n        if (options && options.blocked) {\n          options.blocked(request)\n        }\n      }\n\n      const error = () => {\n        if (options && options.error) {\n          options.error(request)\n        }\n\n        reject(request.error);\n        unlisten()\n      }\n      request.addEventListener('success', success)\n      request.addEventListener('error', error)\n      request.addEventListener('blocked', blocked)\n    })\n\n    return promise\n  }\n  insert(table_name: string, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.insert(record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  updateRecord(table_name: string, options: ITinyDB.IGetIndex, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.update(options, record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getAll(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getAll().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByPrimaryKey(table_name: string, key: ITinyDB.IValidateKey) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByPrimaryKey(key).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByIndex(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByIndex(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  deleteRecord(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.deleteRecord(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  deleteTable(tableName: string){\n    const promise = new Promise((resolve, reject)=> {\n      const conn_request = IN_DB.open(this.dbName, this.getVersion())\n      conn_request.onupgradeneeded = (evt: IDBVersionChangeEvent) => {\n        const db = conn_request.result;\n\n        this.db = db\n        this.setVersion(db.version)\n\n        if(evt.oldVersion < this.getVersion()){\n          db.deleteObjectStore(tableName)\n        }\n      }\n      conn_request.onsuccess = () => {\n        resolve({\n          msg:' deleted table successfully!'\n        })\n      }\n      conn_request.onerror = () => {\n        reject({\n          msg:' deleted table failed!'\n        })\n      }\n    })\n    \n    return promise\n  }\n  some(table_name: string, options: ITinyDB.ISomeOptions) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.some(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  clearTableRecord(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.clear().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getDataWithLimits(table_name: string, options: ITinyDB.ILimt) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.limit(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n}\n\n","import TinyDB from \"./TinyDB\";\n\nif(!window.TinyDB) {\n  window.TinyDB = TinyDB;\n}\n\nexport { \n  TinyDB\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}