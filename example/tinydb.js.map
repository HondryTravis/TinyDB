{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/core/Table.ts","src/core/TinyDB.ts","src/core/index.ts"],"names":[],"mappings":"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","file":"tinydb.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ITinyDB } from \"./types/index\";\n\n// 操作 table 使用\nexport default class Table {\n  static of(option: ITinyDB.IInvokeTable) {\n    return new Table(option)\n  }\n  private name: string\n  private db: IDBDatabase | undefined;\n  private mode: ITinyDB.IOperateMode = 'readwrite'\n  constructor(option: ITinyDB.IInvokeTable) {\n    const { name, db } = option\n    this.name = name\n    this.db = db\n  }\n  setMode(mode: ITinyDB.IOperateMode) {\n    this.mode = mode\n    return this\n  }\n  getMode() {\n    return this.mode\n  }\n  // create transaction \n  transaction(name: string) {\n    const transaction = this.db.transaction([name], this.getMode())\n    return transaction\n  }\n  // open or conntect this table \n  requestStore() {\n    const { name } = this\n    return this.transaction(name).objectStore(name)\n  }\n  insert(record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const addRequest = this.requestStore().add(record)\n      const unlisten = () => {\n        addRequest.removeEventListener('success', success)\n        addRequest.removeEventListener('error', error)\n      }\n      const success = () => {\n        resolve({\n          msg: 'add one record successfully!',\n          status: true,\n          // activedRequest: addRequest\n        })\n        unlisten()\n      }\n      const error = () => {\n        reject({\n          msg: 'add one record failed!',\n          status: false,\n          activedRequest: addRequest\n        })\n      }\n      addRequest.addEventListener('success', success)\n      addRequest.addEventListener('error', error)\n    })\n    return promise\n  }\n  update(option: ITinyDB.IGetIndex, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const { index, value } = option\n      this.getByIndex(option).then((result: any[]) => {\n        if (!result.length) {\n          return console.warn('not found this record')\n        }\n        for (const item of result) {\n          const store = this.requestStore()\n          const newRecord = {\n            ...item,\n            ...record\n          }\n          const updateRequest = store.put(newRecord)\n          updateRequest.onsuccess = () => {\n            resolve({\n              msg: 'update successfully!',\n              status: true,\n            })\n          }\n          updateRequest.onerror = () => {\n            reject({\n              msg: 'update failed!',\n              status: false,\n              activedRequest: updateRequest\n            })\n          }\n        }\n      })\n    })\n    return promise\n  }\n  getByPrimaryKey(primaryKey: ITinyDB.IValidateKey) {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().get(primaryKey)\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject({\n          msg: 'not found this primary key!',\n          status: false,\n          activedRequest: getRequest\n        })\n      }\n    })\n  }\n  getByIndex(option: ITinyDB.IGetIndex) {\n\n    if(!option || !option.value) {\n      return Promise.reject({\n        msg: 'must have one index!',\n      })\n    }\n\n    const { index, value } = option\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().index(index).getAll(value)\n      getRequest.onsuccess = () => {\n        if(getRequest.result.length) {\n          resolve(getRequest.result)\n        } else {\n          console.warn('not find record!')\n        }\n      }\n      getRequest.onerror = () => {\n        reject({\n          msg: 'not found this index!',\n          status: false,\n          activedRequest: getRequest\n        })\n      }\n    })\n  }\n  getAll() {\n    return new Promise((resolve, reject) => {\n      const getRequest = this.requestStore().getAll()\n      getRequest.onsuccess = () => {\n        resolve(getRequest.result)\n      }\n      getRequest.onerror = () => {\n        reject(getRequest.result)\n      }\n    })\n  }\n  some(option: ITinyDB.ISomeOptions) {\n    const { index, lower, upper } = option\n    return new Promise((resolve, reject) => {\n      const cache: any = [];\n      const cursor = this.requestStore().index(index);\n      const range = IDBKeyRange.bound(lower, upper)\n      const rangeRequest = cursor.openCursor(range)\n      rangeRequest.onsuccess = () => {\n        const result = rangeRequest.result;\n        if (result) {\n          cache.push(result.value)\n          result.continue()\n        } else {\n          resolve(cache)\n        }\n      }\n      rangeRequest.onerror = () => {\n        reject(rangeRequest.error)\n      }\n    })\n  }\n  deleteRecord(option: ITinyDB.IGetIndex){\n    return new Promise((resolve, reject) => {\n      this.getByIndex(option).then((data: any[]) => {\n\n        if (!data.length) {\n          return console.warn('not find this record')\n        }\n\n        for (const item of data) {\n          const store = this.requestStore()\n          const { keyPath } = store\n          const deleteRequest = store.delete(item[keyPath as string])\n          deleteRequest.onsuccess = () => {\n            resolve({\n              msg: 'delete successfully!',\n              status: true\n            })\n          }\n          deleteRequest.onerror = () => {\n            reject({\n              msg: 'delete failed!',\n              status: false\n            })\n          }\n        }\n      })\n    })\n  }\n  clear() {\n    return new Promise((resolve, reject) => {\n      const clearRequest = this.requestStore().clear()\n      clearRequest.onsuccess = () => {\n        resolve({\n          msg: 'clear successfully!',\n          status: true\n        })\n      }\n      clearRequest.onerror = () => {\n        reject({\n          msg: 'clear failed!',\n          status: false,\n          activedRequest: clearRequest\n        })\n      }\n    })\n  }\n  destroyed() {\n    this.db = undefined\n    this.name = ''\n  }\n}","import Table from \"./Table\";\nimport { ITinyDB } from \"./types/index\";\n\n\nconst IN_DB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n\nexport default class TinyDB {\n  private dbName: string;\n  private version: number;\n  private db: IDBDatabase\n  static of() {\n    return new TinyDB\n  }\n  constructor() { }\n  setup(options: ITinyDB.IDatabase) {\n    const { dbName } = options\n    this.dbName = dbName\n    return this;\n  }\n  getVersion() {\n    return this.version ? this.version : 1\n  }\n  setVersion(version: number) {\n    this.version = version\n    return this\n  }\n  upgrade(db: IDBDatabase, options: ITinyDB.ITableConfig[]) {\n    this.setVersion(db.version)\n    this.db = db\n\n    for (const table of options) {\n      if (!db.objectStoreNames.contains(table.name)) {\n        const store = db.createObjectStore(table.name, {\n          keyPath: table.primaryKey,\n          autoIncrement: table.autoIncrement ? true : false\n        })\n        if (table.indexs && table.indexs.length !== 0) {\n          for (const index of table.indexs) {\n            this.createIndex(store, {\n              index: index.index,\n              relativeIndex: index.relativeIndex,\n              unique: index.unique\n            })\n          }\n        }\n      }\n    }\n  }\n  createIndex(db: IDBObjectStore, options: ITinyDB.IIndex) {\n    db.createIndex(options.index, options.relativeIndex, { unique: options.unique })\n  }\n  createTable(options: ITinyDB.ITableConfig[] = undefined) {\n    const { dbName } = this\n\n    if (options === undefined) {\n      return console.error('database table config must a list')\n    }\n\n    const request = IN_DB.open(dbName, this.getVersion())\n\n    const unlisten = () => {\n      request.removeEventListener('upgradeneeded', upgrade);\n    };\n\n    const upgrade = () => {\n      this.upgrade(request.result, options)\n      unlisten()\n    }\n\n    request.addEventListener('upgradeneeded', upgrade)\n\n    const promise = new Promise((resolve, reject) => {\n      this.connect(request).then(db => {\n        const versionChange = (evt: IDBVersionChangeEvent) => {\n          console.log('versionchange')\n          db.close()\n          db.removeEventListener('versionchange', versionChange)\n        }\n        db.addEventListener('versionchange', versionChange)\n      })\n    })\n    return promise\n  }\n  deleteDatabase(name: string) {\n   \n    const request = IN_DB.deleteDatabase(name)\n    const promise = new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        console.log(222)\n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted successfully',\n          status: true\n        }\n        resolve(msg)\n      }\n      request.onerror = () => {\n        \n        const msg: ITinyDB.IState = {\n          msg: 'Database deleted failed',\n          status: true,\n          activedRequest: request\n        }\n        reject(msg)\n      }\n    })\n    return promise\n  }\n  connect<T>(request: IDBRequest<T>, options?: ITinyDB.IRequestCallback): Promise<T> {\n\n    const promise = new Promise<T>((resolve, reject) => {\n\n      const unlisten = () => {\n        request.removeEventListener('success', success);\n        request.removeEventListener('error', error);\n      };\n\n      const success = () => {\n        if (options && options.successfully) {\n          options.successfully(request)\n        }\n        resolve(request.result);\n        unlisten()\n      }\n      const blocked = () => {\n        if (options && options.blocked) {\n          options.blocked(request)\n        }\n        console.log('connect blocked')\n      }\n\n      const error = () => {\n        if (options && options.error) {\n          options.error(request)\n        }\n\n        reject(request.error);\n        unlisten()\n      }\n      request.addEventListener('success', success)\n      request.addEventListener('error', error)\n      request.addEventListener('blocked', blocked)\n    })\n\n    return promise\n  }\n  insert(table_name: string, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.insert(record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  updateRecord(table_name: string, options: ITinyDB.IGetIndex, record: any) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.update(options, record).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getAll(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getAll().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByPrimaryKey(table_name: string, key: ITinyDB.IValidateKey) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByPrimaryKey(key).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  getByIndex(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.getByIndex(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  deleteRecord(table_name: string, options: ITinyDB.IGetIndex) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.deleteRecord(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  deleteTable(tableName: string){\n    const promise = new Promise((resolve, reject)=> {\n      const conn_request = IN_DB.open(this.dbName, this.getVersion())\n      conn_request.onupgradeneeded = (evt: IDBVersionChangeEvent) => {\n        const db = conn_request.result;\n\n        this.db = db\n        this.setVersion(db.version)\n\n        if(evt.oldVersion < this.getVersion()){\n          db.deleteObjectStore(tableName)\n        }\n      }\n      conn_request.onsuccess = () => {\n        console.log(this)\n        resolve({\n          msg:' deleted table successfully!'\n        })\n      }\n      conn_request.onerror = () => {\n        reject({\n          msg:' deleted table failed!'\n        })\n      }\n    })\n    \n    return promise\n  }\n  some(table_name: string, options: ITinyDB.ISomeOptions) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.some(options).then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n  clearTableRecord(table_name: string) {\n    const promise = new Promise((resolve, reject) => {\n      const request = IN_DB.open(this.dbName, this.getVersion())\n      this.connect(request).then((db: IDBDatabase) => {\n        const operator = Table.of({\n          name: table_name,\n          db\n        })\n        operator.clear().then(res => resolve(res)).catch((err) => reject(err))\n      })\n    })\n    return promise\n  }\n}\n\n","import TinyDB from \"./TinyDB\";\n\nwindow.TinyDB = TinyDB\n\nexport {\n  TinyDB \n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29yZS9UYWJsZS50cyIsInNyYy9jb3JlL1RpbnlEQi50cyIsInNyYy9jb3JlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0FDRUE7QUFDQSxJQUFBLFFBQUEsYUFBQSxZQUFBO0FBT0UsYUFBQSxLQUFBLENBQVksTUFBWixFQUF3QztBQURoQyxhQUFBLElBQUEsR0FBNkIsV0FBN0I7QUFFRSxZQUFBLE9BQWEsT0FBVCxJQUFKO0FBQUEsWUFBTSxLQUFPLE9BQUwsRUFBUjtBQUNSLGFBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxhQUFLLEVBQUwsR0FBVSxFQUFWO0FBQ0Q7QUFWTSxVQUFBLEVBQUEsR0FBUCxVQUFVLE1BQVYsRUFBc0M7QUFDcEMsZUFBTyxJQUFJLEtBQUosQ0FBVSxNQUFWLENBQVA7QUFDRCxLQUZNO0FBV1AsVUFBQSxTQUFBLENBQUEsT0FBQSxHQUFBLFVBQVEsSUFBUixFQUFrQztBQUNoQyxhQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0EsZUFBTyxJQUFQO0FBQ0QsS0FIRDtBQUlBLFVBQUEsU0FBQSxDQUFBLE9BQUEsR0FBQSxZQUFBO0FBQ0UsZUFBTyxLQUFLLElBQVo7QUFDRCxLQUZEO0FBR0E7QUFDQSxVQUFBLFNBQUEsQ0FBQSxXQUFBLEdBQUEsVUFBWSxJQUFaLEVBQXdCO0FBQ3RCLFlBQU0sY0FBYyxLQUFLLEVBQUwsQ0FBUSxXQUFSLENBQW9CLENBQUMsSUFBRCxDQUFwQixFQUE0QixLQUFLLE9BQUwsRUFBNUIsQ0FBcEI7QUFDQSxlQUFPLFdBQVA7QUFDRCxLQUhEO0FBSUE7QUFDQSxVQUFBLFNBQUEsQ0FBQSxZQUFBLEdBQUEsWUFBQTtBQUNVLFlBQUEsT0FBUyxLQUFMLElBQUo7QUFDUixlQUFPLEtBQUssV0FBTCxDQUFpQixJQUFqQixFQUF1QixXQUF2QixDQUFtQyxJQUFuQyxDQUFQO0FBQ0Qs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QSxPQUtMO0FBSEYsT0FBTyxNQUFQLEdBQWdCLFNBQUEsT0FBaEIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgeyBJVGlueURCIH0gZnJvbSBcIi4vdHlwZXMvaW5kZXhcIjtcblxuLy8g5pON5L2cIHRhYmxlIOS9v+eUqFxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGUge1xuICBzdGF0aWMgb2Yob3B0aW9uOiBJVGlueURCLklJbnZva2VUYWJsZSkge1xuICAgIHJldHVybiBuZXcgVGFibGUob3B0aW9uKVxuICB9XG4gIHByaXZhdGUgbmFtZTogc3RyaW5nXG4gIHByaXZhdGUgZGI6IElEQkRhdGFiYXNlIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIG1vZGU6IElUaW55REIuSU9wZXJhdGVNb2RlID0gJ3JlYWR3cml0ZSdcbiAgY29uc3RydWN0b3Iob3B0aW9uOiBJVGlueURCLklJbnZva2VUYWJsZSkge1xuICAgIGNvbnN0IHsgbmFtZSwgZGIgfSA9IG9wdGlvblxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLmRiID0gZGJcbiAgfVxuICBzZXRNb2RlKG1vZGU6IElUaW55REIuSU9wZXJhdGVNb2RlKSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZVxuICAgIHJldHVybiB0aGlzXG4gIH1cbiAgZ2V0TW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlXG4gIH1cbiAgLy8gY3JlYXRlIHRyYW5zYWN0aW9uIFxuICB0cmFuc2FjdGlvbihuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oW25hbWVdLCB0aGlzLmdldE1vZGUoKSlcbiAgICByZXR1cm4gdHJhbnNhY3Rpb25cbiAgfVxuICAvLyBvcGVuIG9yIGNvbm50ZWN0IHRoaXMgdGFibGUgXG4gIHJlcXVlc3RTdG9yZSgpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHRoaXNcbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbihuYW1lKS5vYmplY3RTdG9yZShuYW1lKVxuICB9XG4gIGluc2VydChyZWNvcmQ6IGFueSkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBhZGRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0U3RvcmUoKS5hZGQocmVjb3JkKVxuICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgIGFkZFJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpXG4gICAgICAgIGFkZFJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcilcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIG1zZzogJ2FkZCBvbmUgcmVjb3JkIHN1Y2Nlc3NmdWxseSEnLFxuICAgICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgICAvLyBhY3RpdmVkUmVxdWVzdDogYWRkUmVxdWVzdFxuICAgICAgICB9KVxuICAgICAgICB1bmxpc3RlbigpXG4gICAgICB9XG4gICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBtc2c6ICdhZGQgb25lIHJlY29yZCBmYWlsZWQhJyxcbiAgICAgICAgICBzdGF0dXM6IGZhbHNlLFxuICAgICAgICAgIGFjdGl2ZWRSZXF1ZXN0OiBhZGRSZXF1ZXN0XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBhZGRSZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKVxuICAgICAgYWRkUmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICB1cGRhdGUob3B0aW9uOiBJVGlueURCLklHZXRJbmRleCwgcmVjb3JkOiBhbnkpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgeyBpbmRleCwgdmFsdWUgfSA9IG9wdGlvblxuICAgICAgdGhpcy5nZXRCeUluZGV4KG9wdGlvbikudGhlbigocmVzdWx0OiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKCdub3QgZm91bmQgdGhpcyByZWNvcmQnKVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCBzdG9yZSA9IHRoaXMucmVxdWVzdFN0b3JlKClcbiAgICAgICAgICBjb25zdCBuZXdSZWNvcmQgPSB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgLi4ucmVjb3JkXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZVJlcXVlc3QgPSBzdG9yZS5wdXQobmV3UmVjb3JkKVxuICAgICAgICAgIHVwZGF0ZVJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIG1zZzogJ3VwZGF0ZSBzdWNjZXNzZnVsbHkhJyxcbiAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlUmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgbXNnOiAndXBkYXRlIGZhaWxlZCEnLFxuICAgICAgICAgICAgICBzdGF0dXM6IGZhbHNlLFxuICAgICAgICAgICAgICBhY3RpdmVkUmVxdWVzdDogdXBkYXRlUmVxdWVzdFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG4gIGdldEJ5UHJpbWFyeUtleShwcmltYXJ5S2V5OiBJVGlueURCLklWYWxpZGF0ZUtleSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBnZXRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0U3RvcmUoKS5nZXQocHJpbWFyeUtleSlcbiAgICAgIGdldFJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICByZXNvbHZlKGdldFJlcXVlc3QucmVzdWx0KVxuICAgICAgfVxuICAgICAgZ2V0UmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3Qoe1xuICAgICAgICAgIG1zZzogJ25vdCBmb3VuZCB0aGlzIHByaW1hcnkga2V5IScsXG4gICAgICAgICAgc3RhdHVzOiBmYWxzZSxcbiAgICAgICAgICBhY3RpdmVkUmVxdWVzdDogZ2V0UmVxdWVzdFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgZ2V0QnlJbmRleChvcHRpb246IElUaW55REIuSUdldEluZGV4KSB7XG5cbiAgICBpZighb3B0aW9uIHx8ICFvcHRpb24udmFsdWUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh7XG4gICAgICAgIG1zZzogJ211c3QgaGF2ZSBvbmUgaW5kZXghJyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgeyBpbmRleCwgdmFsdWUgfSA9IG9wdGlvblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBnZXRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0U3RvcmUoKS5pbmRleChpbmRleCkuZ2V0QWxsKHZhbHVlKVxuICAgICAgZ2V0UmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIGlmKGdldFJlcXVlc3QucmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgIHJlc29sdmUoZ2V0UmVxdWVzdC5yZXN1bHQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdub3QgZmluZCByZWNvcmQhJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZ2V0UmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3Qoe1xuICAgICAgICAgIG1zZzogJ25vdCBmb3VuZCB0aGlzIGluZGV4IScsXG4gICAgICAgICAgc3RhdHVzOiBmYWxzZSxcbiAgICAgICAgICBhY3RpdmVkUmVxdWVzdDogZ2V0UmVxdWVzdFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgZ2V0QWxsKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBnZXRSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0U3RvcmUoKS5nZXRBbGwoKVxuICAgICAgZ2V0UmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoZ2V0UmVxdWVzdC5yZXN1bHQpXG4gICAgICB9XG4gICAgICBnZXRSZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHJlamVjdChnZXRSZXF1ZXN0LnJlc3VsdClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHNvbWUob3B0aW9uOiBJVGlueURCLklTb21lT3B0aW9ucykge1xuICAgIGNvbnN0IHsgaW5kZXgsIGxvd2VyLCB1cHBlciB9ID0gb3B0aW9uXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNhY2hlOiBhbnkgPSBbXTtcbiAgICAgIGNvbnN0IGN1cnNvciA9IHRoaXMucmVxdWVzdFN0b3JlKCkuaW5kZXgoaW5kZXgpO1xuICAgICAgY29uc3QgcmFuZ2UgPSBJREJLZXlSYW5nZS5ib3VuZChsb3dlciwgdXBwZXIpXG4gICAgICBjb25zdCByYW5nZVJlcXVlc3QgPSBjdXJzb3Iub3BlbkN1cnNvcihyYW5nZSlcbiAgICAgIHJhbmdlUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJhbmdlUmVxdWVzdC5yZXN1bHQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBjYWNoZS5wdXNoKHJlc3VsdC52YWx1ZSlcbiAgICAgICAgICByZXN1bHQuY29udGludWUoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoY2FjaGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJhbmdlUmVxdWVzdC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICByZWplY3QocmFuZ2VSZXF1ZXN0LmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgZGVsZXRlUmVjb3JkKG9wdGlvbjogSVRpbnlEQi5JR2V0SW5kZXgpe1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmdldEJ5SW5kZXgob3B0aW9uKS50aGVuKChkYXRhOiBhbnlbXSkgPT4ge1xuXG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKCdub3QgZmluZCB0aGlzIHJlY29yZCcpXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YSkge1xuICAgICAgICAgIGNvbnN0IHN0b3JlID0gdGhpcy5yZXF1ZXN0U3RvcmUoKVxuICAgICAgICAgIGNvbnN0IHsga2V5UGF0aCB9ID0gc3RvcmVcbiAgICAgICAgICBjb25zdCBkZWxldGVSZXF1ZXN0ID0gc3RvcmUuZGVsZXRlKGl0ZW1ba2V5UGF0aCBhcyBzdHJpbmddKVxuICAgICAgICAgIGRlbGV0ZVJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIG1zZzogJ2RlbGV0ZSBzdWNjZXNzZnVsbHkhJyxcbiAgICAgICAgICAgICAgc3RhdHVzOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGVSZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3Qoe1xuICAgICAgICAgICAgICBtc2c6ICdkZWxldGUgZmFpbGVkIScsXG4gICAgICAgICAgICAgIHN0YXR1czogZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNsZWFyUmVxdWVzdCA9IHRoaXMucmVxdWVzdFN0b3JlKCkuY2xlYXIoKVxuICAgICAgY2xlYXJSZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgbXNnOiAnY2xlYXIgc3VjY2Vzc2Z1bGx5IScsXG4gICAgICAgICAgc3RhdHVzOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBjbGVhclJlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBtc2c6ICdjbGVhciBmYWlsZWQhJyxcbiAgICAgICAgICBzdGF0dXM6IGZhbHNlLFxuICAgICAgICAgIGFjdGl2ZWRSZXF1ZXN0OiBjbGVhclJlcXVlc3RcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIGRlc3Ryb3llZCgpIHtcbiAgICB0aGlzLmRiID0gdW5kZWZpbmVkXG4gICAgdGhpcy5uYW1lID0gJydcbiAgfVxufSIsImltcG9ydCBUYWJsZSBmcm9tIFwiLi9UYWJsZVwiO1xuaW1wb3J0IHsgSVRpbnlEQiB9IGZyb20gXCIuL3R5cGVzL2luZGV4XCI7XG5cblxuY29uc3QgSU5fREIgPSB3aW5kb3cuaW5kZXhlZERCIHx8IHdpbmRvdy5tb3pJbmRleGVkREIgfHwgd2luZG93LndlYmtpdEluZGV4ZWREQiB8fCB3aW5kb3cubXNJbmRleGVkREI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbnlEQiB7XG4gIHByaXZhdGUgZGJOYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgdmVyc2lvbjogbnVtYmVyO1xuICBwcml2YXRlIGRiOiBJREJEYXRhYmFzZVxuICBzdGF0aWMgb2YoKSB7XG4gICAgcmV0dXJuIG5ldyBUaW55REJcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHsgfVxuICBzZXR1cChvcHRpb25zOiBJVGlueURCLklEYXRhYmFzZSkge1xuICAgIGNvbnN0IHsgZGJOYW1lIH0gPSBvcHRpb25zXG4gICAgdGhpcy5kYk5hbWUgPSBkYk5hbWVcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnNpb24gPyB0aGlzLnZlcnNpb24gOiAxXG4gIH1cbiAgc2V0VmVyc2lvbih2ZXJzaW9uOiBudW1iZXIpIHtcbiAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuICB1cGdyYWRlKGRiOiBJREJEYXRhYmFzZSwgb3B0aW9uczogSVRpbnlEQi5JVGFibGVDb25maWdbXSkge1xuICAgIHRoaXMuc2V0VmVyc2lvbihkYi52ZXJzaW9uKVxuICAgIHRoaXMuZGIgPSBkYlxuXG4gICAgZm9yIChjb25zdCB0YWJsZSBvZiBvcHRpb25zKSB7XG4gICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnModGFibGUubmFtZSkpIHtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSh0YWJsZS5uYW1lLCB7XG4gICAgICAgICAga2V5UGF0aDogdGFibGUucHJpbWFyeUtleSxcbiAgICAgICAgICBhdXRvSW5jcmVtZW50OiB0YWJsZS5hdXRvSW5jcmVtZW50ID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICAgIGlmICh0YWJsZS5pbmRleHMgJiYgdGFibGUuaW5kZXhzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgdGFibGUuaW5kZXhzKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUluZGV4KHN0b3JlLCB7XG4gICAgICAgICAgICAgIGluZGV4OiBpbmRleC5pbmRleCxcbiAgICAgICAgICAgICAgcmVsYXRpdmVJbmRleDogaW5kZXgucmVsYXRpdmVJbmRleCxcbiAgICAgICAgICAgICAgdW5pcXVlOiBpbmRleC51bmlxdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNyZWF0ZUluZGV4KGRiOiBJREJPYmplY3RTdG9yZSwgb3B0aW9uczogSVRpbnlEQi5JSW5kZXgpIHtcbiAgICBkYi5jcmVhdGVJbmRleChvcHRpb25zLmluZGV4LCBvcHRpb25zLnJlbGF0aXZlSW5kZXgsIHsgdW5pcXVlOiBvcHRpb25zLnVuaXF1ZSB9KVxuICB9XG4gIGNyZWF0ZVRhYmxlKG9wdGlvbnM6IElUaW55REIuSVRhYmxlQ29uZmlnW10gPSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCB7IGRiTmFtZSB9ID0gdGhpc1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ2RhdGFiYXNlIHRhYmxlIGNvbmZpZyBtdXN0IGEgbGlzdCcpXG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdCA9IElOX0RCLm9wZW4oZGJOYW1lLCB0aGlzLmdldFZlcnNpb24oKSlcblxuICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgdXBncmFkZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHVwZ3JhZGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnVwZ3JhZGUocmVxdWVzdC5yZXN1bHQsIG9wdGlvbnMpXG4gICAgICB1bmxpc3RlbigpXG4gICAgfVxuXG4gICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgdXBncmFkZSlcblxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3QocmVxdWVzdCkudGhlbihkYiA9PiB7XG4gICAgICAgIGNvbnN0IHZlcnNpb25DaGFuZ2UgPSAoZXZ0OiBJREJWZXJzaW9uQ2hhbmdlRXZlbnQpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygndmVyc2lvbmNoYW5nZScpXG4gICAgICAgICAgZGIuY2xvc2UoKVxuICAgICAgICAgIGRiLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCB2ZXJzaW9uQ2hhbmdlKVxuICAgICAgICB9XG4gICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCB2ZXJzaW9uQ2hhbmdlKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cbiAgZGVsZXRlRGF0YWJhc2UobmFtZTogc3RyaW5nKSB7XG4gICBcbiAgICBjb25zdCByZXF1ZXN0ID0gSU5fREIuZGVsZXRlRGF0YWJhc2UobmFtZSlcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKDIyMilcbiAgICAgICAgY29uc3QgbXNnOiBJVGlueURCLklTdGF0ZSA9IHtcbiAgICAgICAgICBtc2c6ICdEYXRhYmFzZSBkZWxldGVkIHN1Y2Nlc3NmdWxseScsXG4gICAgICAgICAgc3RhdHVzOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShtc2cpXG4gICAgICB9XG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBtc2c6IElUaW55REIuSVN0YXRlID0ge1xuICAgICAgICAgIG1zZzogJ0RhdGFiYXNlIGRlbGV0ZWQgZmFpbGVkJyxcbiAgICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgICAgYWN0aXZlZFJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgICAgfVxuICAgICAgICByZWplY3QobXNnKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICBjb25uZWN0PFQ+KHJlcXVlc3Q6IElEQlJlcXVlc3Q8VD4sIG9wdGlvbnM/OiBJVGlueURCLklSZXF1ZXN0Q2FsbGJhY2spOiBQcm9taXNlPFQ+IHtcblxuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc3VjY2Vzc2Z1bGx5KSB7XG4gICAgICAgICAgb3B0aW9ucy5zdWNjZXNzZnVsbHkocmVxdWVzdClcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgdW5saXN0ZW4oKVxuICAgICAgfVxuICAgICAgY29uc3QgYmxvY2tlZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5ibG9ja2VkKSB7XG4gICAgICAgICAgb3B0aW9ucy5ibG9ja2VkKHJlcXVlc3QpXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3QgYmxvY2tlZCcpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVycm9yKSB7XG4gICAgICAgICAgb3B0aW9ucy5lcnJvcihyZXF1ZXN0KVxuICAgICAgICB9XG5cbiAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICB1bmxpc3RlbigpXG4gICAgICB9XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKVxuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKVxuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgYmxvY2tlZClcbiAgICB9KVxuXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICBpbnNlcnQodGFibGVfbmFtZTogc3RyaW5nLCByZWNvcmQ6IGFueSkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gSU5fREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5nZXRWZXJzaW9uKCkpXG4gICAgICB0aGlzLmNvbm5lY3QocmVxdWVzdCkudGhlbigoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yID0gVGFibGUub2Yoe1xuICAgICAgICAgIG5hbWU6IHRhYmxlX25hbWUsXG4gICAgICAgICAgZGJcbiAgICAgICAgfSlcbiAgICAgICAgb3BlcmF0b3IuaW5zZXJ0KHJlY29yZCkudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMpKS5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG4gIHVwZGF0ZVJlY29yZCh0YWJsZV9uYW1lOiBzdHJpbmcsIG9wdGlvbnM6IElUaW55REIuSUdldEluZGV4LCByZWNvcmQ6IGFueSkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gSU5fREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5nZXRWZXJzaW9uKCkpXG4gICAgICB0aGlzLmNvbm5lY3QocmVxdWVzdCkudGhlbigoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yID0gVGFibGUub2Yoe1xuICAgICAgICAgIG5hbWU6IHRhYmxlX25hbWUsXG4gICAgICAgICAgZGJcbiAgICAgICAgfSlcbiAgICAgICAgb3BlcmF0b3IudXBkYXRlKG9wdGlvbnMsIHJlY29yZCkudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMpKS5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG4gIGdldEFsbCh0YWJsZV9uYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IElOX0RCLm9wZW4odGhpcy5kYk5hbWUsIHRoaXMuZ2V0VmVyc2lvbigpKVxuICAgICAgdGhpcy5jb25uZWN0KHJlcXVlc3QpLnRoZW4oKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuICAgICAgICBjb25zdCBvcGVyYXRvciA9IFRhYmxlLm9mKHtcbiAgICAgICAgICBuYW1lOiB0YWJsZV9uYW1lLFxuICAgICAgICAgIGRiXG4gICAgICAgIH0pXG4gICAgICAgIG9wZXJhdG9yLmdldEFsbCgpLnRoZW4ocmVzID0+IHJlc29sdmUocmVzKSkuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICBnZXRCeVByaW1hcnlLZXkodGFibGVfbmFtZTogc3RyaW5nLCBrZXk6IElUaW55REIuSVZhbGlkYXRlS2V5KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBJTl9EQi5vcGVuKHRoaXMuZGJOYW1lLCB0aGlzLmdldFZlcnNpb24oKSlcbiAgICAgIHRoaXMuY29ubmVjdChyZXF1ZXN0KS50aGVuKChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBUYWJsZS5vZih7XG4gICAgICAgICAgbmFtZTogdGFibGVfbmFtZSxcbiAgICAgICAgICBkYlxuICAgICAgICB9KVxuICAgICAgICBvcGVyYXRvci5nZXRCeVByaW1hcnlLZXkoa2V5KS50aGVuKHJlcyA9PiByZXNvbHZlKHJlcykpLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cbiAgZ2V0QnlJbmRleCh0YWJsZV9uYW1lOiBzdHJpbmcsIG9wdGlvbnM6IElUaW55REIuSUdldEluZGV4KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBJTl9EQi5vcGVuKHRoaXMuZGJOYW1lLCB0aGlzLmdldFZlcnNpb24oKSlcbiAgICAgIHRoaXMuY29ubmVjdChyZXF1ZXN0KS50aGVuKChkYjogSURCRGF0YWJhc2UpID0+IHtcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBUYWJsZS5vZih7XG4gICAgICAgICAgbmFtZTogdGFibGVfbmFtZSxcbiAgICAgICAgICBkYlxuICAgICAgICB9KVxuICAgICAgICBvcGVyYXRvci5nZXRCeUluZGV4KG9wdGlvbnMpLnRoZW4ocmVzID0+IHJlc29sdmUocmVzKSkuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICBkZWxldGVSZWNvcmQodGFibGVfbmFtZTogc3RyaW5nLCBvcHRpb25zOiBJVGlueURCLklHZXRJbmRleCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gSU5fREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5nZXRWZXJzaW9uKCkpXG4gICAgICB0aGlzLmNvbm5lY3QocmVxdWVzdCkudGhlbigoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yID0gVGFibGUub2Yoe1xuICAgICAgICAgIG5hbWU6IHRhYmxlX25hbWUsXG4gICAgICAgICAgZGJcbiAgICAgICAgfSlcbiAgICAgICAgb3BlcmF0b3IuZGVsZXRlUmVjb3JkKG9wdGlvbnMpLnRoZW4ocmVzID0+IHJlc29sdmUocmVzKSkuY2F0Y2goKGVycikgPT4gcmVqZWN0KGVycikpXG4gICAgICB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuICBkZWxldGVUYWJsZSh0YWJsZU5hbWU6IHN0cmluZyl7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuICAgICAgY29uc3QgY29ubl9yZXF1ZXN0ID0gSU5fREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5nZXRWZXJzaW9uKCkpXG4gICAgICBjb25uX3JlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2dDogSURCVmVyc2lvbkNoYW5nZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGRiID0gY29ubl9yZXF1ZXN0LnJlc3VsdDtcblxuICAgICAgICB0aGlzLmRiID0gZGJcbiAgICAgICAgdGhpcy5zZXRWZXJzaW9uKGRiLnZlcnNpb24pXG5cbiAgICAgICAgaWYoZXZ0Lm9sZFZlcnNpb24gPCB0aGlzLmdldFZlcnNpb24oKSl7XG4gICAgICAgICAgZGIuZGVsZXRlT2JqZWN0U3RvcmUodGFibGVOYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25uX3JlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBtc2c6JyBkZWxldGVkIHRhYmxlIHN1Y2Nlc3NmdWxseSEnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBjb25uX3JlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICBtc2c6JyBkZWxldGVkIHRhYmxlIGZhaWxlZCEnXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG4gIHNvbWUodGFibGVfbmFtZTogc3RyaW5nLCBvcHRpb25zOiBJVGlueURCLklTb21lT3B0aW9ucykge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gSU5fREIub3Blbih0aGlzLmRiTmFtZSwgdGhpcy5nZXRWZXJzaW9uKCkpXG4gICAgICB0aGlzLmNvbm5lY3QocmVxdWVzdCkudGhlbigoZGI6IElEQkRhdGFiYXNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wZXJhdG9yID0gVGFibGUub2Yoe1xuICAgICAgICAgIG5hbWU6IHRhYmxlX25hbWUsXG4gICAgICAgICAgZGJcbiAgICAgICAgfSlcbiAgICAgICAgb3BlcmF0b3Iuc29tZShvcHRpb25zKS50aGVuKHJlcyA9PiByZXNvbHZlKHJlcykpLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cbiAgY2xlYXJUYWJsZVJlY29yZCh0YWJsZV9uYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IElOX0RCLm9wZW4odGhpcy5kYk5hbWUsIHRoaXMuZ2V0VmVyc2lvbigpKVxuICAgICAgdGhpcy5jb25uZWN0KHJlcXVlc3QpLnRoZW4oKGRiOiBJREJEYXRhYmFzZSkgPT4ge1xuICAgICAgICBjb25zdCBvcGVyYXRvciA9IFRhYmxlLm9mKHtcbiAgICAgICAgICBuYW1lOiB0YWJsZV9uYW1lLFxuICAgICAgICAgIGRiXG4gICAgICAgIH0pXG4gICAgICAgIG9wZXJhdG9yLmNsZWFyKCkudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMpKS5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG59XG5cbiIsImltcG9ydCBUaW55REIgZnJvbSBcIi4vVGlueURCXCI7XG5cbndpbmRvdy5UaW55REIgPSBUaW55REJcblxuZXhwb3J0IHtcbiAgVGlueURCIFxufSJdfQ=="}